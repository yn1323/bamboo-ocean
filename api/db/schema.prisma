datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  // バグでマイグレート時に毎回DBリセットが必要
  // https://github.com/prisma/prisma/issues/19100
  // prismak機能を利用しない場合、下記をsqlファイルの最初に手動で追記する
  // CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
  // ただしこれをつけないとCIでエラーになる
  previewFeatures = ["postgresqlExtensions"]
}

model Type {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()"))
  name               String
  battleIndex        String // Home上でのインデックス
  fromTypes          TypeRelation[]       @relation("fromTypes")
  toTypes            TypeRelation[]       @relation("toTypes")
  moves              Move[]
  pokemons           Pokemon[]
  battleDataTerastal BattleDataTerastal[]
  MyPokemon          MyPokemon[]

  textImageUrl     String
  imageUrl         String
  terastalImageUrl String
  myEnemy          MyEnemy[]
  myDamageCalc     MyDamageCalc[]
}

model TypeRelation {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  from   Type   @relation("fromTypes", fields: [fromId], references: [id])
  fromId String
  to     Type   @relation("toTypes", fields: [toId], references: [id])
  toId   String
  rate   Float
}

model Item {
  id          String @id @default(dbgenerated("uuid_generate_v4()"))
  name        String
  detail      String
  battleIndex String

  base64Image   String
  imageUrl      String
  imageSmallUrl String
  imageLargeUrl String

  battleDataItem BattleDataItem[]
  myPokemon      MyPokemon[]
  myEnemy        MyEnemy[]
  myDamageCalc   MyDamageCalc[]
}

model Ability {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()"))
  name                String
  detail              String
  battleIndex         String
  pokemons            Pokemon[]
  battleDataAbilities BattleDataAbility[]
  myPokemon           MyPokemon[]
  myEnemy             MyEnemy[]
  myDamageCalc        MyDamageCalc[]
}

model AttackType {
  id    String @id @default(dbgenerated("uuid_generate_v4()"))
  // 物理 | 特殊 | 変化
  name  String
  moves Move[]

  imageUrl String
}

model Move {
  id     String  @id @default(dbgenerated("uuid_generate_v4()"))
  detail String
  name   String
  type   Type?   @relation(fields: [typeId], references: [id])
  typeId String?

  attackType   AttackType? @relation(fields: [attackTypeId], references: [id])
  attackTypeId String?

  power            Int
  accuracy         Int
  pp               Int
  isContact        Boolean
  isQuick          Boolean
  isDelay          Boolean
  isChangeable     Boolean
  isMultipleAttack Boolean
  isMustCritical   Boolean
  isPunch          Boolean
  isSound          Boolean
  isPowder         Boolean
  isWave           Boolean
  isJaw            Boolean
  isBullet         Boolean
  isDance          Boolean
  isWind           Boolean
  isCut            Boolean

  pokemons Pokemon[]

  battleIndex     String
  battleDataMoves BattleDataMove[]

  myPokemon      MyPokemon[]
  myEnemy        MyEnemy[]
  MyDamageCalc   MyDamageCalc? @relation(fields: [myDamageCalcId], references: [id])
  myDamageCalcId String?
}

model Pokemon {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  name   String
  form   String
  no     Int
  height Float
  weight Float

  types Type[]

  statusH Int
  statusA Int
  statusB Int
  statusC Int
  statusD Int
  statusS Int

  abilities Ability[]
  moves     Move[]

  base64Image   String
  imageUrl      String
  imageSmallUrl String
  imageLargeUrl String

  url String

  battleIndex     String
  battleFormIndex String

  battleData BattleData[]
  myPokemon  MyPokemon[]

  myEnemy MyEnemy[]

  evolutionFrom Evolution[]    @relation("EvolutionFrom")
  evolutionTo   Evolution[]    @relation("EvolutionTo")
  evolutions    Evolution[]
  myDamageCalc  MyDamageCalc[]
}

model Evolution {
  id        String    @id @default(dbgenerated("uuid_generate_v4()"))
  pokemon   Pokemon   @relation(fields: [pokemonId], references: [id])
  pokemonId String
  from      Pokemon[] @relation("EvolutionFrom")
  to        Pokemon[] @relation("EvolutionTo")
}

model Nature {
  id          String @id @default(dbgenerated("uuid_generate_v4()"))
  name        String
  battleIndex String

  increase         String
  decrease         String
  battleDataNature BattleDataNature[]
  myPokemon        MyPokemon[]
  myEnemy          MyEnemy[]
  myDamageCalc     MyDamageCalc[]
}

model Form {
  id        String @id @default(dbgenerated("uuid_generate_v4()"))
  no        String
  formType  String
  formType2 String
  name      String

  battleData BattleData[]
}

model BattleIndex {
  id         String   @id @default(dbgenerated("uuid_generate_v4()"))
  capturedAt DateTime
  startAt    DateTime
  endAt      DateTime
  name       String

  battleData BattleData[]
}

model BattleData {
  id String @id @default(dbgenerated("uuid_generate_v4()"))

  battleIndex   BattleIndex @relation(fields: [battleIndexId], references: [id])
  battleIndexId String

  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId String

  no   String
  rank Int

  battleDataMove     BattleDataMove[]
  battleDataAbility  BattleDataAbility[]
  battleDataNature   BattleDataNature[]
  battleDataItem     BattleDataItem[]
  battleDataTerastal BattleDataTerastal[]

  form   Form?   @relation(fields: [formId], references: [id])
  formId String?
}

model BattleDataMove {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  move   Move   @relation(fields: [moveId], references: [id])
  moveId String

  rate         Float
  battleData   BattleData @relation(fields: [battleDataId], references: [id])
  battleDataId String
}

model BattleDataAbility {
  id        String  @id @default(dbgenerated("uuid_generate_v4()"))
  ability   Ability @relation(fields: [abilityId], references: [id])
  abilityId String

  rate         Float
  battleData   BattleData @relation(fields: [battleDataId], references: [id])
  battleDataId String
}

model BattleDataNature {
  id       String @id @default(dbgenerated("uuid_generate_v4()"))
  nature   Nature @relation(fields: [natureId], references: [id])
  natureId String

  rate         Float
  battleData   BattleData @relation(fields: [battleDataId], references: [id])
  battleDataId String
}

model BattleDataItem {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  item   Item   @relation(fields: [itemId], references: [id])
  itemId String

  rate         Float
  battleData   BattleData @relation(fields: [battleDataId], references: [id])
  battleDataId String
}

model BattleDataTerastal {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  type   Type   @relation(fields: [typeId], references: [id])
  typeId String

  rate         Float
  battleData   BattleData @relation(fields: [battleDataId], references: [id])
  battleDataId String
}

model User {
  id                String              @id @default(dbgenerated("uuid_generate_v4()"))
  name              String
  createdUserAt     DateTime
  updatedUserAt     DateTime
  deletedUserAt     DateTime?
  myPokemon         MyPokemon[]
  myParty           MyParty[]
  myPartyTag        MyPartyTag[]
  myPokemonTag      MyPokemonTag[]
  myEnemy           MyEnemy[]
  myEnemyTag        MyEnemyTag[]
  MyDamageCalcIndex MyDamageCalcIndex[]
}

model MyPartyTag {
  id       String  @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  favorite Boolean
  memo     String

  myParty MyParty[]
  user    User      @relation(fields: [userId], references: [id])
  userId  String
}

model MyPokemonTag {
  id       String  @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  favorite Boolean
  memo     String

  myPokemon MyPokemon[]
  user      User        @relation(fields: [userId], references: [id])
  userId    String
}

model MyPokemon {
  id       String  @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  favorite Boolean
  evH      Int
  evA      Int
  evB      Int
  evC      Int
  evD      Int
  evS      Int

  ivH  Int
  ivA  Int
  ivB  Int
  ivC  Int
  ivD  Int
  ivS  Int
  memo String

  tag MyPokemonTag[]

  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId String

  item   Item?   @relation(fields: [itemId], references: [id])
  itemId String?

  ability   Ability? @relation(fields: [abilityId], references: [id])
  abilityId String?

  nature   Nature @relation(fields: [natureId], references: [id])
  natureId String

  terastal   Type?   @relation(fields: [terastalId], references: [id])
  terastalId String?

  moves Move[]

  myParty MyParty[]

  user          User            @relation(fields: [userId], references: [id])
  userId        String
  myPokemonPros MyPokemonPros[]
  myPokemonCons MyPokemonCons[]
}

model MyEnemyTag {
  id       String  @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  favorite Boolean
  memo     String

  myEnemy MyEnemy[]
  user    User      @relation(fields: [userId], references: [id])
  userId  String
}

model MyEnemy {
  id       String  @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  favorite Boolean
  evH      Int
  evA      Int
  evB      Int
  evC      Int
  evD      Int
  evS      Int

  ivH  Int
  ivA  Int
  ivB  Int
  ivC  Int
  ivD  Int
  ivS  Int
  memo String

  tag MyEnemyTag[]

  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId String

  item   Item?   @relation(fields: [itemId], references: [id])
  itemId String?

  ability   Ability? @relation(fields: [abilityId], references: [id])
  abilityId String?

  nature   Nature @relation(fields: [natureId], references: [id])
  natureId String

  terastal   Type?   @relation(fields: [terastalId], references: [id])
  terastalId String?

  moves Move[]

  user          User            @relation(fields: [userId], references: [id])
  userId        String
  myPokemonPros MyPokemonPros[]
  myPokemonCons MyPokemonCons[]
}

model MyPokemonPros {
  id          String    @id @default(dbgenerated("uuid_generate_v4()"))
  myPokemon   MyPokemon @relation(fields: [myPokemonId], references: [id])
  myPokemonId String

  myEnemy   MyEnemy @relation(fields: [myEnemyId], references: [id])
  myEnemyId String
}

model MyPokemonCons {
  id          String    @id @default(dbgenerated("uuid_generate_v4()"))
  myPokemon   MyPokemon @relation(fields: [myPokemonId], references: [id])
  myPokemonId String

  myEnemy   MyEnemy @relation(fields: [myEnemyId], references: [id])
  myEnemyId String
}

model MyParty {
  id       String  @id @default(dbgenerated("uuid_generate_v4()"))
  name     String
  favorite Boolean
  memo     String

  tag MyPartyTag[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  myPokemon MyPokemon[]
}

model MyDamageCalcIndex {
  id     String @id @default(dbgenerated("uuid_generate_v4()"))
  user   User   @relation(fields: [userId], references: [id])
  userId String

  clientId String

  createdAt DateTime
  updatedAt DateTime

  title    String
  memo     String
  favorite Boolean

  myDamageCalc MyDamageCalc[]
}

model MyDamageCalc {
  id String @id @default(dbgenerated("uuid_generate_v4()"))

  myDamageCalcIndex   MyDamageCalcIndex? @relation(fields: [myDamageCalcIndexId], references: [id])
  myDamageCalcIndexId String?

  pokemon   Pokemon @relation(fields: [pokemonId], references: [id])
  pokemonId String

  item   Item?   @relation(fields: [itemId], references: [id])
  itemId String?

  ability   Ability? @relation(fields: [abilityId], references: [id])
  abilityId String?

  nature   Nature @relation(fields: [natureId], references: [id])
  natureId String

  terastal   Type?   @relation(fields: [terastalId], references: [id])
  terastalId String?

  moves Move[]

  evH Int
  evA Int
  evB Int
  evC Int
  evD Int
  evS Int

  ivH Int
  ivA Int
  ivB Int
  ivC Int
  ivD Int
  ivS Int

  rankA Int
  rankB Int
  rankC Int
  rankD Int
  rankS Int

  side  String
  order Int
}
